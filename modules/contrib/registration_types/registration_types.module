<?php

/**
 * @file
 * Contains registration_types.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\registration_types\Entity\RegistrationType;
use Drupal\registration_types\Entity\RegistrationTypeInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function registration_types_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the registration_types module.
    case 'help.page.registration_types':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Customizable registration types') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function registration_types_theme() {
  return [
    'registration_types' => [
      'template' => 'registration_types',
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function registration_types_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // for reference: the value is set in RegistrationTypesController::page()
  if ($form_state->get('registration_type')) {
    // @todo: do stuff here
    //drupal_set_message($form_state->get('registration_type'));
  }
}

/**
 * Implements hook_entity_type_build().
 *
 * Provide form display mode classes.
 */
function registration_types_entity_type_build(array &$entity_types) {
  // @todo: the cache/registry here must be every time updated when registration types change
  // @todo: check for another way to avoid infinite loop here
  static $semaphore = FALSE;
  // this sould be static for the same reason that $semaphore is used
  static $form_types = [];

  // Here we use registration_type machine names *with a prefix* instead of just machine names
  // to not override "default" or "register" form classes (in case user occasionally uses "default" or "register"
  // for a custom reistration type machine name. And for the same reason we don't use display modes machine
  // names (from RegistrationType::getDisplay()) because those could override default ones.
  //
  // Also having this set, we can also use Default and Register display modes in custom registration types
  // without overriding drupal default behaviour.
  // for reference: "default" and "register" form classes are set in User.php annotation
  if (!$semaphore) {
    $semaphore = TRUE;
    $types = RegistrationType::loadMultiple();
    foreach ($types as $machine_name => $type) {
      // add a prefix to avoid overriding "default" and "register" display modes in setFormClass()
      // @see RegistrationTypeRegisterForm::init() and RegistrationTypesController::page()
      $form_types[] = RegistrationTypeInterface::DISPLAY_MODE_PREFIX . $machine_name;
    }
  }
  // @todo: this is a hack to avoid infinite loop and the hook is called twice because loadMultiple calls it too
  //   which provides inifinite loop
  foreach($form_types as $form_type) {
    // generally it could be $entity_types['user']->setFormClass($form_type, 'Drupal\user\RegisterForm');
    // but we need a custom handler to attach roles

    // here custom operation types are associated with a custom RegisterForm replacement form class
    // @todo: also potentially this allows to set different different types of Register forms for the same display,
    // need to invoke a custom hook here then
    $entity_types['user']->setFormClass($form_type, 'Drupal\registration_types\Form\RegistrationTypeRegisterForm');
  }
}

